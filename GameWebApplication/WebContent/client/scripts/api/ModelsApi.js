/**
 * 
 * Access to view and update game states
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ModelPluginResource', 'model/ModelResource', 'model/PartInstanceResource', 'model/PartPrototypeResource', 'model/PlacePrototypeResource', 'model/RoleResource', 'model/RuleResource', 'model/StageResource'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ModelPluginResource'), require('../model/ModelResource'), require('../model/PartInstanceResource'), require('../model/PartPrototypeResource'), require('../model/PlacePrototypeResource'), require('../model/RoleResource'), require('../model/RuleResource'), require('../model/StageResource'));
  } else {
    // Browser globals (root is window)
    if (!root.SwaggerJsClient) {
      root.SwaggerJsClient = {};
    }
    root.SwaggerJsClient.ModelsApi = factory(root.SwaggerJsClient.ApiClient, root.SwaggerJsClient.ModelPluginResource, root.SwaggerJsClient.ModelResource, root.SwaggerJsClient.PartInstanceResource, root.SwaggerJsClient.PartPrototypeResource, root.SwaggerJsClient.PlacePrototypeResource, root.SwaggerJsClient.RoleResource, root.SwaggerJsClient.RuleResource, root.SwaggerJsClient.StageResource);
  }
}(this, function(ApiClient, ModelPluginResource, ModelResource, PartInstanceResource, PartPrototypeResource, PlacePrototypeResource, RoleResource, RuleResource, StageResource) {
  'use strict';

  /**
   * Models service.
   * @module api/ModelsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new ModelsApi. 
   * @alias module:api/ModelsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getModels operation.
     * @callback module:api/ModelsApi~getModelsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelResource>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of all models
     * 
     * @param {module:api/ModelsApi~getModelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelResource>}
     */
    this.getModels = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [ModelResource];

      return this.apiClient.callApi(
        '/models', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPartPrototypes operation.
     * @callback module:api/ModelsApi~getPartPrototypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PartPrototypeResource>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} modelId 
     * @param {module:api/ModelsApi~getPartPrototypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PartPrototypeResource>}
     */
    this.getPartPrototypes = function(modelId, callback) {
      var postBody = null;

      // verify the required parameter 'modelId' is set
      if (modelId == undefined || modelId == null) {
        throw new Error("Missing the required parameter 'modelId' when calling getPartPrototypes");
      }


      var pathParams = {
        'modelId': modelId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [PartPrototypeResource];

      return this.apiClient.callApi(
        '/models/{modelId}/prototypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getParts operation.
     * @callback module:api/ModelsApi~getPartsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PartInstanceResource>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} modelId 
     * @param {module:api/ModelsApi~getPartsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PartInstanceResource>}
     */
    this.getParts = function(modelId, callback) {
      var postBody = null;

      // verify the required parameter 'modelId' is set
      if (modelId == undefined || modelId == null) {
        throw new Error("Missing the required parameter 'modelId' when calling getParts");
      }


      var pathParams = {
        'modelId': modelId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [PartInstanceResource];

      return this.apiClient.callApi(
        '/models/{modelId}/parts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlacePrototypes operation.
     * @callback module:api/ModelsApi~getPlacePrototypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlacePrototypeResource>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} prototypeId 
     * @param {String} modelId 
     * @param {module:api/ModelsApi~getPlacePrototypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlacePrototypeResource>}
     */
    this.getPlacePrototypes = function(prototypeId, modelId, callback) {
      var postBody = null;

      // verify the required parameter 'prototypeId' is set
      if (prototypeId == undefined || prototypeId == null) {
        throw new Error("Missing the required parameter 'prototypeId' when calling getPlacePrototypes");
      }

      // verify the required parameter 'modelId' is set
      if (modelId == undefined || modelId == null) {
        throw new Error("Missing the required parameter 'modelId' when calling getPlacePrototypes");
      }


      var pathParams = {
        'prototypeId': prototypeId,
        'modelId': modelId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [PlacePrototypeResource];

      return this.apiClient.callApi(
        '/models/{modelId}/prototypes/{prototypeId}/places', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlugins operation.
     * @callback module:api/ModelsApi~getPluginsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelPluginResource>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} modelId 
     * @param {module:api/ModelsApi~getPluginsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelPluginResource>}
     */
    this.getPlugins = function(modelId, callback) {
      var postBody = null;

      // verify the required parameter 'modelId' is set
      if (modelId == undefined || modelId == null) {
        throw new Error("Missing the required parameter 'modelId' when calling getPlugins");
      }


      var pathParams = {
        'modelId': modelId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [ModelPluginResource];

      return this.apiClient.callApi(
        '/models/{modelId}/plugins', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRoles operation.
     * @callback module:api/ModelsApi~getRolesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleResource>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} modelId 
     * @param {module:api/ModelsApi~getRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleResource>}
     */
    this.getRoles = function(modelId, callback) {
      var postBody = null;

      // verify the required parameter 'modelId' is set
      if (modelId == undefined || modelId == null) {
        throw new Error("Missing the required parameter 'modelId' when calling getRoles");
      }


      var pathParams = {
        'modelId': modelId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [RoleResource];

      return this.apiClient.callApi(
        '/models/{modelId}/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRules operation.
     * @callback module:api/ModelsApi~getRulesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RuleResource>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} stageId 
     * @param {String} modelId 
     * @param {module:api/ModelsApi~getRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RuleResource>}
     */
    this.getRules = function(stageId, modelId, callback) {
      var postBody = null;

      // verify the required parameter 'stageId' is set
      if (stageId == undefined || stageId == null) {
        throw new Error("Missing the required parameter 'stageId' when calling getRules");
      }

      // verify the required parameter 'modelId' is set
      if (modelId == undefined || modelId == null) {
        throw new Error("Missing the required parameter 'modelId' when calling getRules");
      }


      var pathParams = {
        'stageId': stageId,
        'modelId': modelId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [RuleResource];

      return this.apiClient.callApi(
        '/models/{modelId}/stages/{stageId}/rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStages operation.
     * @callback module:api/ModelsApi~getStagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/StageResource>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} modelId 
     * @param {module:api/ModelsApi~getStagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/StageResource>}
     */
    this.getStages = function(modelId, callback) {
      var postBody = null;

      // verify the required parameter 'modelId' is set
      if (modelId == undefined || modelId == null) {
        throw new Error("Missing the required parameter 'modelId' when calling getStages");
      }


      var pathParams = {
        'modelId': modelId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [StageResource];

      return this.apiClient.callApi(
        '/models/{modelId}/stages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
