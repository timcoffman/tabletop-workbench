/**
 * 
 * Access to view and update game states
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/LogEntryResource', 'model/OperationPatternSetResource', 'model/PartResource', 'model/ParticipantCreationForm', 'model/ParticipantResource', 'model/PlacePatternForm', 'model/PlaceResource', 'model/RelationshipResource', 'model/StateCreationForm', 'model/StateMutationForm', 'model/StateResource'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/LogEntryResource'), require('../model/OperationPatternSetResource'), require('../model/PartResource'), require('../model/ParticipantCreationForm'), require('../model/ParticipantResource'), require('../model/PlacePatternForm'), require('../model/PlaceResource'), require('../model/RelationshipResource'), require('../model/StateCreationForm'), require('../model/StateMutationForm'), require('../model/StateResource'));
  } else {
    // Browser globals (root is window)
    if (!root.SwaggerJsClient) {
      root.SwaggerJsClient = {};
    }
    root.SwaggerJsClient.StatesApi = factory(root.SwaggerJsClient.ApiClient, root.SwaggerJsClient.LogEntryResource, root.SwaggerJsClient.OperationPatternSetResource, root.SwaggerJsClient.PartResource, root.SwaggerJsClient.ParticipantCreationForm, root.SwaggerJsClient.ParticipantResource, root.SwaggerJsClient.PlacePatternForm, root.SwaggerJsClient.PlaceResource, root.SwaggerJsClient.RelationshipResource, root.SwaggerJsClient.StateCreationForm, root.SwaggerJsClient.StateMutationForm, root.SwaggerJsClient.StateResource);
  }
}(this, function(ApiClient, LogEntryResource, OperationPatternSetResource, PartResource, ParticipantCreationForm, ParticipantResource, PlacePatternForm, PlaceResource, RelationshipResource, StateCreationForm, StateMutationForm, StateResource) {
  'use strict';

  /**
   * States service.
   * @module api/StatesApi
   * @version 1.0.0
   */

  /**
   * Constructs a new StatesApi. 
   * @alias module:api/StatesApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the callDelete operation.
     * @callback module:api/StatesApi~callDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} stateId 
     * @param {module:api/StatesApi~callDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.callDelete = function(stateId, callback) {
      var postBody = null;

      // verify the required parameter 'stateId' is set
      if (stateId == undefined || stateId == null) {
        throw new Error("Missing the required parameter 'stateId' when calling callDelete");
      }


      var pathParams = {
        'stateId': stateId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/states/{stateId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createParticipant operation.
     * @callback module:api/StatesApi~createParticipantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ParticipantResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} stateId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ParticipantCreationForm} opts.body 
     * @param {module:api/StatesApi~createParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ParticipantResource}
     */
    this.createParticipant = function(stateId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'stateId' is set
      if (stateId == undefined || stateId == null) {
        throw new Error("Missing the required parameter 'stateId' when calling createParticipant");
      }


      var pathParams = {
        'stateId': stateId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = ParticipantResource;

      return this.apiClient.callApi(
        '/states/{stateId}/participants', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createState operation.
     * @callback module:api/StatesApi~createStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StateResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/StateCreationForm} opts.body 
     * @param {module:api/StatesApi~createStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StateResource}
     */
    this.createState = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = StateResource;

      return this.apiClient.callApi(
        '/states', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the find operation.
     * @callback module:api/StatesApi~findCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlaceResource>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} stateId 
     * @param {Object} opts Optional parameters
     * @param {module:model/PlacePatternForm} opts.body 
     * @param {module:api/StatesApi~findCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlaceResource>}
     */
    this.find = function(stateId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'stateId' is set
      if (stateId == undefined || stateId == null) {
        throw new Error("Missing the required parameter 'stateId' when calling find");
      }


      var pathParams = {
        'stateId': stateId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [PlaceResource];

      return this.apiClient.callApi(
        '/states/{stateId}/find', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the get operation.
     * @callback module:api/StatesApi~getCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StateResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} stateId 
     * @param {module:api/StatesApi~getCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StateResource}
     */
    this.get = function(stateId, callback) {
      var postBody = null;

      // verify the required parameter 'stateId' is set
      if (stateId == undefined || stateId == null) {
        throw new Error("Missing the required parameter 'stateId' when calling get");
      }


      var pathParams = {
        'stateId': stateId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = StateResource;

      return this.apiClient.callApi(
        '/states/{stateId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLogEntries operation.
     * @callback module:api/StatesApi~getLogEntriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LogEntryResource>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} stateId 
     * @param {module:api/StatesApi~getLogEntriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LogEntryResource>}
     */
    this.getLogEntries = function(stateId, callback) {
      var postBody = null;

      // verify the required parameter 'stateId' is set
      if (stateId == undefined || stateId == null) {
        throw new Error("Missing the required parameter 'stateId' when calling getLogEntries");
      }


      var pathParams = {
        'stateId': stateId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [LogEntryResource];

      return this.apiClient.callApi(
        '/states/{stateId}/log', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOperationPatternSets operation.
     * @callback module:api/StatesApi~getOperationPatternSetsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OperationPatternSetResource>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} stateId 
     * @param {module:api/StatesApi~getOperationPatternSetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OperationPatternSetResource>}
     */
    this.getOperationPatternSets = function(stateId, callback) {
      var postBody = null;

      // verify the required parameter 'stateId' is set
      if (stateId == undefined || stateId == null) {
        throw new Error("Missing the required parameter 'stateId' when calling getOperationPatternSets");
      }


      var pathParams = {
        'stateId': stateId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [OperationPatternSetResource];

      return this.apiClient.callApi(
        '/states/{stateId}/allowedOperations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getParticipants operation.
     * @callback module:api/StatesApi~getParticipantsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ParticipantResource>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} stateId 
     * @param {module:api/StatesApi~getParticipantsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ParticipantResource>}
     */
    this.getParticipants = function(stateId, callback) {
      var postBody = null;

      // verify the required parameter 'stateId' is set
      if (stateId == undefined || stateId == null) {
        throw new Error("Missing the required parameter 'stateId' when calling getParticipants");
      }


      var pathParams = {
        'stateId': stateId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [ParticipantResource];

      return this.apiClient.callApi(
        '/states/{stateId}/participants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getParts operation.
     * @callback module:api/StatesApi~getPartsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PartResource>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} stateId 
     * @param {module:api/StatesApi~getPartsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PartResource>}
     */
    this.getParts = function(stateId, callback) {
      var postBody = null;

      // verify the required parameter 'stateId' is set
      if (stateId == undefined || stateId == null) {
        throw new Error("Missing the required parameter 'stateId' when calling getParts");
      }


      var pathParams = {
        'stateId': stateId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [PartResource];

      return this.apiClient.callApi(
        '/states/{stateId}/parts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlaces operation.
     * @callback module:api/StatesApi~getPlacesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlaceResource>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} partId 
     * @param {String} stateId 
     * @param {module:api/StatesApi~getPlacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlaceResource>}
     */
    this.getPlaces = function(partId, stateId, callback) {
      var postBody = null;

      // verify the required parameter 'partId' is set
      if (partId == undefined || partId == null) {
        throw new Error("Missing the required parameter 'partId' when calling getPlaces");
      }

      // verify the required parameter 'stateId' is set
      if (stateId == undefined || stateId == null) {
        throw new Error("Missing the required parameter 'stateId' when calling getPlaces");
      }


      var pathParams = {
        'partId': partId,
        'stateId': stateId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [PlaceResource];

      return this.apiClient.callApi(
        '/states/{stateId}/parts/{partId}/places', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRelationships operation.
     * @callback module:api/StatesApi~getRelationshipsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RelationshipResource>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} stateId 
     * @param {module:api/StatesApi~getRelationshipsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RelationshipResource>}
     */
    this.getRelationships = function(stateId, callback) {
      var postBody = null;

      // verify the required parameter 'stateId' is set
      if (stateId == undefined || stateId == null) {
        throw new Error("Missing the required parameter 'stateId' when calling getRelationships");
      }


      var pathParams = {
        'stateId': stateId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [RelationshipResource];

      return this.apiClient.callApi(
        '/states/{stateId}/relationships', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStates operation.
     * @callback module:api/StatesApi~getStatesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of all states
     * 
     * @param {module:api/StatesApi~getStatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.getStates = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/states', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the get_0 operation.
     * @callback module:api/StatesApi~get_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LogEntryResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} logEntryIndex 
     * @param {String} stateId 
     * @param {module:api/StatesApi~get_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LogEntryResource}
     */
    this.get_0 = function(logEntryIndex, stateId, callback) {
      var postBody = null;

      // verify the required parameter 'logEntryIndex' is set
      if (logEntryIndex == undefined || logEntryIndex == null) {
        throw new Error("Missing the required parameter 'logEntryIndex' when calling get_0");
      }

      // verify the required parameter 'stateId' is set
      if (stateId == undefined || stateId == null) {
        throw new Error("Missing the required parameter 'stateId' when calling get_0");
      }


      var pathParams = {
        'logEntryIndex': logEntryIndex,
        'stateId': stateId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = LogEntryResource;

      return this.apiClient.callApi(
        '/states/{stateId}/log/{logEntryIndex}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the get_1 operation.
     * @callback module:api/StatesApi~get_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PlaceResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} pluginUri 
     * @param {String} placeTypeLocalName 
     * @param {String} partId 
     * @param {String} stateId 
     * @param {module:api/StatesApi~get_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlaceResource}
     */
    this.get_1 = function(pluginUri, placeTypeLocalName, partId, stateId, callback) {
      var postBody = null;

      // verify the required parameter 'pluginUri' is set
      if (pluginUri == undefined || pluginUri == null) {
        throw new Error("Missing the required parameter 'pluginUri' when calling get_1");
      }

      // verify the required parameter 'placeTypeLocalName' is set
      if (placeTypeLocalName == undefined || placeTypeLocalName == null) {
        throw new Error("Missing the required parameter 'placeTypeLocalName' when calling get_1");
      }

      // verify the required parameter 'partId' is set
      if (partId == undefined || partId == null) {
        throw new Error("Missing the required parameter 'partId' when calling get_1");
      }

      // verify the required parameter 'stateId' is set
      if (stateId == undefined || stateId == null) {
        throw new Error("Missing the required parameter 'stateId' when calling get_1");
      }


      var pathParams = {
        'pluginUri': pluginUri,
        'placeTypeLocalName': placeTypeLocalName,
        'partId': partId,
        'stateId': stateId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = PlaceResource;

      return this.apiClient.callApi(
        '/states/{stateId}/parts/{partId}/places/{pluginUri}/{placeTypeLocalName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the mutate operation.
     * @callback module:api/StatesApi~mutateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LogEntryResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} stateId 
     * @param {Object} opts Optional parameters
     * @param {module:model/StateMutationForm} opts.body 
     * @param {module:api/StatesApi~mutateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LogEntryResource}
     */
    this.mutate = function(stateId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'stateId' is set
      if (stateId == undefined || stateId == null) {
        throw new Error("Missing the required parameter 'stateId' when calling mutate");
      }


      var pathParams = {
        'stateId': stateId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = LogEntryResource;

      return this.apiClient.callApi(
        '/states/{stateId}/log', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
