/*
 * 
 * Access to view and update game states
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.tcoffman.ttwb.service.api;

import com.tcoffman.ttwb.service.ApiException;
import com.tcoffman.ttwb.service.api.data.LogEntryResource;
import com.tcoffman.ttwb.service.api.data.OperationPatternSetResource;
import com.tcoffman.ttwb.service.api.data.PartResource;
import com.tcoffman.ttwb.service.api.data.ParticipantCreationForm;
import com.tcoffman.ttwb.service.api.data.ParticipantResource;
import com.tcoffman.ttwb.service.api.data.PlacePatternForm;
import com.tcoffman.ttwb.service.api.data.PlaceResource;
import com.tcoffman.ttwb.service.api.data.RelationshipResource;
import com.tcoffman.ttwb.service.api.data.StateCreationForm;
import com.tcoffman.ttwb.service.api.data.StateMutationForm;
import com.tcoffman.ttwb.service.api.data.StateResource;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StatesApi
 */
@Ignore
public class StatesApiTest {

    private final StatesApi api = new StatesApi();

    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createParticipant1Test() throws ApiException {
        String stateId = null;
        ParticipantCreationForm body = null;
        ParticipantResource response = api.createParticipant1(stateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createStateTest() throws ApiException {
        StateCreationForm body = null;
        StateResource response = api.createState(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTest() throws ApiException {
        String stateId = null;
        api.delete(stateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findTest() throws ApiException {
        String stateId = null;
        PlacePatternForm body = null;
        List<PlaceResource> response = api.find(stateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLogEntries1Test() throws ApiException {
        String stateId = null;
        List<LogEntryResource> response = api.getLogEntries1(stateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLogEntry1Test() throws ApiException {
        Long logEntryIndex = null;
        String stateId = null;
        LogEntryResource response = api.getLogEntry1(logEntryIndex, stateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOperationPatternSets1Test() throws ApiException {
        String stateId = null;
        List<OperationPatternSetResource> response = api.getOperationPatternSets1(stateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParticipants1Test() throws ApiException {
        String stateId = null;
        List<ParticipantResource> response = api.getParticipants1(stateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParts2Test() throws ApiException {
        String stateId = null;
        List<PartResource> response = api.getParts2(stateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlace1Test() throws ApiException {
        String pluginUri = null;
        String placeTypeLocalName = null;
        String partId = null;
        String stateId = null;
        PlaceResource response = api.getPlace1(pluginUri, placeTypeLocalName, partId, stateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlaces1Test() throws ApiException {
        String partId = null;
        String stateId = null;
        List<PlaceResource> response = api.getPlaces1(partId, stateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRelationships1Test() throws ApiException {
        String stateId = null;
        List<RelationshipResource> response = api.getRelationships1(stateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStateTest() throws ApiException {
        String stateId = null;
        StateResource response = api.getState(stateId);

        // TODO: test validations
    }
    
    /**
     * List of all states
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStatesTest() throws ApiException {
        List<String> response = api.getStates();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mutate1Test() throws ApiException {
        String stateId = null;
        StateMutationForm body = null;
        LogEntryResource response = api.mutate1(stateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mutations1Test() throws ApiException {
        String stateId = null;
        StateMutationForm body = null;
        List<StateMutationForm> response = api.mutations1(stateId, body);

        // TODO: test validations
    }
    
}
