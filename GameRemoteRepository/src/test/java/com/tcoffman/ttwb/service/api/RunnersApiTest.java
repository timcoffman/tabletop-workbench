/*
 * 
 * Access to view and update game states
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.tcoffman.ttwb.service.api;

import com.tcoffman.ttwb.service.ApiException;
import com.tcoffman.ttwb.service.api.data.LogEntryResource;
import com.tcoffman.ttwb.service.api.data.OperationPatternSetResource;
import com.tcoffman.ttwb.service.api.data.PartResource;
import com.tcoffman.ttwb.service.api.data.ParticipantCreationForm;
import com.tcoffman.ttwb.service.api.data.ParticipantResource;
import com.tcoffman.ttwb.service.api.data.PlaceResource;
import com.tcoffman.ttwb.service.api.data.RelationshipResource;
import com.tcoffman.ttwb.service.api.data.RunnerCreationForm;
import com.tcoffman.ttwb.service.api.data.RunnerResource;
import com.tcoffman.ttwb.service.api.data.StateMutationForm;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RunnersApi
 */
@Ignore
public class RunnersApiTest {

    private final RunnersApi api = new RunnersApi();

    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createParticipantTest() throws ApiException {
        String stateId = null;
        ParticipantCreationForm body = null;
        ParticipantResource response = api.createParticipant(stateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRunnerTest() throws ApiException {
        RunnerCreationForm body = null;
        RunnerResource response = api.createRunner(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLogEntriesTest() throws ApiException {
        String stateId = null;
        List<LogEntryResource> response = api.getLogEntries(stateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLogEntryTest() throws ApiException {
        Long logEntryIndex = null;
        String stateId = null;
        LogEntryResource response = api.getLogEntry(logEntryIndex, stateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOperationPatternSetsTest() throws ApiException {
        String stateId = null;
        List<OperationPatternSetResource> response = api.getOperationPatternSets(stateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParticipantsTest() throws ApiException {
        String stateId = null;
        List<ParticipantResource> response = api.getParticipants(stateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParts1Test() throws ApiException {
        String stateId = null;
        List<PartResource> response = api.getParts1(stateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlaceTest() throws ApiException {
        String pluginUri = null;
        String placeTypeLocalName = null;
        String partId = null;
        String stateId = null;
        PlaceResource response = api.getPlace(pluginUri, placeTypeLocalName, partId, stateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlacesTest() throws ApiException {
        String partId = null;
        String stateId = null;
        List<PlaceResource> response = api.getPlaces(partId, stateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRelationshipsTest() throws ApiException {
        String stateId = null;
        List<RelationshipResource> response = api.getRelationships(stateId);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Runner
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRunnerTest() throws ApiException {
        String stateId = null;
        RunnerResource response = api.getRunner(stateId);

        // TODO: test validations
    }
    
    /**
     * List of all runners
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRunnersTest() throws ApiException {
        List<RunnerResource> response = api.getRunners();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mutateTest() throws ApiException {
        String stateId = null;
        StateMutationForm body = null;
        LogEntryResource response = api.mutate(stateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mutationsTest() throws ApiException {
        String stateId = null;
        StateMutationForm body = null;
        List<StateMutationForm> response = api.mutations(stateId, body);

        // TODO: test validations
    }
    
}
