/*
 * 
 * Access to view and update game states
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.tcoffman.ttwb.service.api;

import com.tcoffman.ttwb.service.ApiException;
import com.tcoffman.ttwb.service.api.data.ModelPluginResource;
import com.tcoffman.ttwb.service.api.data.ModelResource;
import com.tcoffman.ttwb.service.api.data.PartInstanceResource;
import com.tcoffman.ttwb.service.api.data.PartPrototypeResource;
import com.tcoffman.ttwb.service.api.data.PlacePrototypeResource;
import com.tcoffman.ttwb.service.api.data.PlaceTypeResource;
import com.tcoffman.ttwb.service.api.data.RelationshipTypeResource;
import com.tcoffman.ttwb.service.api.data.RoleResource;
import com.tcoffman.ttwb.service.api.data.RuleResource;
import com.tcoffman.ttwb.service.api.data.StageResource;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ModelsApi
 */
@Ignore
public class ModelsApiTest {

    private final ModelsApi api = new ModelsApi();

    
    /**
     * Retrieve a Game Model
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getModelTest() throws ApiException {
        String modelId = null;
        ModelResource response = api.getModel(modelId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getModelPluginTest() throws ApiException {
        String pluginUri = null;
        String modelId = null;
        ModelPluginResource response = api.getModelPlugin(pluginUri, modelId);

        // TODO: test validations
    }
    
    /**
     * List of all Game Models
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getModelsTest() throws ApiException {
        List<String> response = api.getModels();

        // TODO: test validations
    }
    
    /**
     * Retrieve a Part
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPartTest() throws ApiException {
        Long partIndex = null;
        String modelId = null;
        PartInstanceResource response = api.getPart(partIndex, modelId);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Part Prototype
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPartPrototypeTest() throws ApiException {
        String prototypeId = null;
        String modelId = null;
        PartPrototypeResource response = api.getPartPrototype(prototypeId, modelId);

        // TODO: test validations
    }
    
    /**
     * List of Part Prototypes
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPartPrototypesTest() throws ApiException {
        String modelId = null;
        List<PartPrototypeResource> response = api.getPartPrototypes(modelId);

        // TODO: test validations
    }
    
    /**
     * List of all Part Instances
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPartsTest() throws ApiException {
        String modelId = null;
        List<PartInstanceResource> response = api.getParts(modelId);

        // TODO: test validations
    }
    
    /**
     * Retrive a Place Prototype
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlacePrototypeTest() throws ApiException {
        String pluginUri = null;
        String placeTypeLocalName = null;
        String prototypeId = null;
        String modelId = null;
        PlacePrototypeResource response = api.getPlacePrototype(pluginUri, placeTypeLocalName, prototypeId, modelId);

        // TODO: test validations
    }
    
    /**
     * List of Place Prototypes
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlacePrototypesTest() throws ApiException {
        String prototypeId = null;
        String modelId = null;
        List<PlacePrototypeResource> response = api.getPlacePrototypes(prototypeId, modelId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlaceTypeTest() throws ApiException {
        String localName = null;
        String pluginUri = null;
        String modelId = null;
        PlaceTypeResource response = api.getPlaceType(localName, pluginUri, modelId);

        // TODO: test validations
    }
    
    /**
     * List of all Place Types
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlaceTypesTest() throws ApiException {
        String pluginUri = null;
        String modelId = null;
        List<PlaceTypeResource> response = api.getPlaceTypes(pluginUri, modelId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRelationshipTypeTest() throws ApiException {
        String localName = null;
        String pluginUri = null;
        String modelId = null;
        RelationshipTypeResource response = api.getRelationshipType(localName, pluginUri, modelId);

        // TODO: test validations
    }
    
    /**
     * List of all Relationship Types
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRelationshipTypesTest() throws ApiException {
        String pluginUri = null;
        String modelId = null;
        List<RelationshipTypeResource> response = api.getRelationshipTypes(pluginUri, modelId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRequiredPluginsTest() throws ApiException {
        String modelId = null;
        List<ModelPluginResource> response = api.getRequiredPlugins(modelId);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Role
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRoleTest() throws ApiException {
        String roleId = null;
        String modelId = null;
        RoleResource response = api.getRole(roleId, modelId);

        // TODO: test validations
    }
    
    /**
     * List of Game Roles
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRolesTest() throws ApiException {
        String modelId = null;
        List<RoleResource> response = api.getRoles(modelId);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Game Rule
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRuleTest() throws ApiException {
        Integer ruleIndex = null;
        String stageId = null;
        String modelId = null;
        RuleResource response = api.getRule(ruleIndex, stageId, modelId);

        // TODO: test validations
    }
    
    /**
     * List of Game Rules
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRulesTest() throws ApiException {
        String stageId = null;
        String modelId = null;
        List<RuleResource> response = api.getRules(stageId, modelId);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Stage
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStageTest() throws ApiException {
        String stageId = null;
        String modelId = null;
        StageResource response = api.getStage(stageId, modelId);

        // TODO: test validations
    }
    
    /**
     * List of Game Stages
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStagesTest() throws ApiException {
        String modelId = null;
        List<StageResource> response = api.getStages(modelId);

        // TODO: test validations
    }
    
}
